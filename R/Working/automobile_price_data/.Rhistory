angle <- rep(angle, length.out = nx)
density <- rep(density, length.out = nx)
twopi <- if (clockwise)
-2 * pi
else 2 * pi
t2xy <- function(t, radius) {
t2p <- twopi * t + init.angle * pi/180
list(x = radius * cos(t2p),
y = radius * sin(t2p))
}
for (i in 1L:nx) {
n <- max(2, floor(edges * dx[i]))
P <- t2xy(seq.int(x[i], x[i + 1], length.out = n),
outer.radius)
polygon(c(P$x, 0), c(P$y, 0), density = density[i],
angle = angle[i], border = border[i],
col = col[i], lty = lty[i])
Pout <- t2xy(mean(x[i + 0:1]), outer.radius)
lab <- as.character(labels[i])
if (!is.na(lab) && nzchar(lab)) {
lines(c(1, 1.05) * Pout$x, c(1, 1.05) * Pout$y)
text(1.1 * Pout$x, 1.1 * Pout$y, labels[i],
xpd = TRUE, adj = ifelse(Pout$x < 0, 1, 0),
...)
}
## Add white disc
Pin <- t2xy(seq.int(0, 1, length.out = n*nx),
inner.radius)
polygon(Pin$x, Pin$y, density = density[i],
angle = angle[i], border = border[i],
col = "white", lty = lty[i])
}
title(main = main, ...)
invisible(NULL)
}
doughnut(data[,2], data[,1])
data = c(179718,41370,41914,44280)
double(data, c("Army","Navy","Airforce","Marine"))
doughnut(data)
doughnut(data, labels = c("a","b","c","d"))
doughnut(data, labels = c("Army","Navy","Airforce","Marine"))
doughnut(data, labels = c("Army","Navy","Airforce","Marine"), main = "Traumatic Brain Injury")
# 1. Doughnut Plot
library(ggplot2)
data = c(179718,41370,41914,44280)
data = as.data.frame(matrix(c("Army", "Navy", "Airforce", "Marine", 179718, 41370, 41914, 44280), ncol = 2))
data
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = sapply(data, is.factor)
out = data[,factor_columns] = as.numeric(data[,factor_columns])
factor_columns
# I need to convert categorical variables to numerical data
factor_columns = as.numeric(sapply(data, is.factor))
factor_columns
out = data[,factor_columns] = as.numeric(data[,factor_columns])
data[,factor_columns]
# I need to convert categorical variables to numerical data
factor_columns = as.data.frame(sapply(data, is.factor))
data[,factor_columns]
factor_columns
data[,factor_columns]
# I need to convert categorical variables to numerical data
factor_columns = sapply(data, is.factor)
factor_columns
data[,factor_columns]
str(data[,factor_columns])
sapply(data[,factor_columns], as.numeric)
out = as.data.frame(sapply(data[,factor_columns], as.numeric))
View(out)
?cbind
out = cbind(data, out)
factor_columns
as.list(factor_columns)
as.numeric(factor_columns)
which(as.numeric(factor_columns) == 1)
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
193*.02
193*.2
round(38.6)
# Breaking down to 80% training and 20% testing dataset
samples = samples(1:193, 39)
training = data[-samples,]
testing = data[samples,]
# Breaking down to 80% training and 20% testing dataset
samples = sample(1:193, 39)
training = data[-samples,]
testing = data[samples,]
biplot(data)
?biplot
biplot(data,data)
pairs(data)
normalize(data)
??normalize
gtable::normalize(data)
gtable::z_normalize(data)
?normalize
data = scale(data)
summary(data)
str(data)
install.packages("neuralnet")
library(neuralnet)
?neuralnet
nn = neuralnet(price ~ ., data)
nn = neuralnet(price~., data)
nn = neuralnet(price~., data = data)
View(testing)
nn = neuralnet(price~., training)
data = scale(data[,-25])
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
data = as.data.frame(scale(data[,-25]))
View(data)
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
scaled.data = as.data.frame(scale(data[,-25]))
scaled.data$price = data$price
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
# Normalization
scaled.data = as.data.frame(scale(data[,-25]))
scaled.data$price = data$price
# Breaking down to 80% training and 20% testing dataset
samples = sample(1:193, 39)
training = scaled.data[-samples,]
testing = data[samples,]
# Model Training
library(neuralnet)
nn = neuralnet(price~., training)
library(pca3d)
pca3d(data)
pca3d(prcomp(data))
pca3d(prcomp(scaled.data))
pca3d(prcomp(scaled.data[-25]))
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
# Normalization
scaled.data = as.data.frame(scale(data[,-25]))
scaled.data$price = data$price
# Breaking down to 80% training and 20% testing dataset
samples = sample(1:193, 39)
training = scaled.data[-samples,]
testing = data[samples,]
# Model Training with LInear regression
View(scaled.data)
View(data)
# Model Training with LInear regression
# We take all the features into account
features = names(scaled.data)
formula = paste("price ~ ", features[!features %in% "price"], collapse = "+")
features = names(scaled.data)
features = paste(features[!features %in% "price"])
features = paste(features[!features %in% "price"], collapse = "+")
formula = paste("price ~ ", features, collapse = "+")
formula
formula = as.formula(formula)
NN = neuralnet(formula = formula, hidden = c(20,10,5,1), linear.output = T, data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(50,25,5,1), linear.output = T, data = training)
plot(NN)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(20,5), linear.output = T, data = training)
NN = neuralnet(formula = formula, hidden = c(20,5), linear.output = T, data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = 10, linear.output = T, data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = 1, linear.output = T, data = training)
plot(NN)
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
# Normalization
scaled.data = as.data.frame(scale(data[,-25]))
scaled.data$price = data$price
# Breaking down to 80% training and 20% testing dataset
samples = sample(1:193, 39)
training = scaled.data[-samples,]
testing = data[samples,]
# Model Training with LInear regression
# We take all the features into account
features = names(scaled.data)
features = paste(features[!features %in% "price"], collapse = "+")
formula = paste("price ~ ", features, collapse = "+")
formula = as.formula(formula)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, stepmax = 1e+10 ,data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, stepmax = 1e+7,data = training)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.1, stepmax = 1e+5,data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.05, stepmax = 1e+5,data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, threshold = 0.1, stepmax = 1e+5,data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.1, stepmax = 1e+5,data = training)
plot(NN)
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
# Normalization
scaled.data = as.data.frame(scale(data[,-25]))
scaled.data$price = data$price
# Breaking down to 80% training and 20% testing dataset
samples = sample(1:193, 39)
training = scaled.data[-samples,]
testing = data[samples,]
# Model Training with LInear regression
# We take all the features into account
features = names(scaled.data)
features = paste(features[!features %in% "price"], collapse = "+")
formula = paste("price ~ ", features, collapse = "+")
formula = as.formula(formula)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.1, stepmax = 1e+5,data = training)
plot(NN)
predictions = compute(NN, testing[,1:24])
str(predictions)
predictions
predictions$net.result
View(testing)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.01, stepmax = 1e+8, data = training)
plot(NN)
predictions = compute(NN, testing[,1:24])
predictions$net.result
plot(NN)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.1, stepmax = 1e+8, data = training)
View(training)
predictions = compute(NN, testing[,1:24])
View(predictions)
predictions$net.result
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
# Normalization
scaled.data = as.data.frame(scale(data[,-25]))
scaled.data$price = data$price
# Breaking down to 80% training and 20% testing dataset
samples = sample(1:193, 39)
training = scaled.data[-samples,]
testing = scaled.data[samples,]
# Model Training with LInear regression
# We take all the features into account
features = names(scaled.data)
features = paste(features[!features %in% "price"], collapse = "+")
formula = paste("price ~ ", features, collapse = "+")
formula = as.formula(formula)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.01, stepmax = 1e+8, data = training)
plot(NN)
# Prediction
predictions = compute(NN, testing[,1:24])
predictions$net.result
NN
NN$err.fct()
NN$err.fct
NN$response
plot(testing$price, predictions$net.result)
plot(testing$price, predictions$net.result)
predictions$net.result
as.data.frame(predictions$net.result)
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, threshold = 0.01, stepmax = 1e+12, data = training)
plot(NN)
1e12
1e+12
typeof(10e5)
typeof(10e12)
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, threshold = 0.01, stepmax = 1e+12, data = training)
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, threshold = 0.01, stepmax = 1000000000000, data = training)
plot(NN)
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, threshold = 0.01, stepmax = 1e+8, data = training)
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, threshold = 0.01, stepmax = 1e+8, data = training)
plot(NN)
predictions = compute(NN, testing[,1:24])
predictions$net.result
rm(list = ls())
rm(list = ls())
setwd("Desktop/DesktopDocuments/TopGearTemp/R/Working/automobile_price_data/")
data = read.csv("Automobile price data _Raw.csv")
# Replace '?' in the data with NA
data[data == "?"] = NA
na_count_col = as.data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_col
# I decieded to remove normalized.losses column as the comumn has 41 missing values
data = data[,-2]
na_count_row = rowSums(is.na(data))
na_count_row
sum(na_count_row > 0)
# I decieded to remove 12 rows with NA value from the dataset
data = data[complete.cases(data),]
# I need to convert categorical variables to numerical data
factor_columns = which(as.numeric(sapply(data, is.factor)) == 1)
for (i in factor_columns) {
data[,i] = as.numeric(data[,i])
}
str(data)
# Normalization
scaled.data = as.data.frame(scale(data[,-25]))
scaled.data$price = data$price
# Breaking down to 80% training and 20% testing dataset
samples = sample(1:193, 39)
training = scaled.data[-samples,]
testing = scaled.data[samples,]
# Model Training with LInear regression
# We take all the features into account
features = names(scaled.data)
features = paste(features[!features %in% "price"], collapse = "+")
formula = paste("price ~ ", features, collapse = "+")
formula = as.formula(formula)
formula
NN = neuralnet(formula = formula, hidden = c(20,10,5), linear.output = T, threshold = 0.01, stepmax = 1e+8, data = training)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.01, stepmax = 1e+8, data = training)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.01, stepmax = 1e+9, data = training)
NN = neuralnet(formula = formula, hidden = c(10,5), linear.output = T, threshold = 0.01, stepmax = 1e+10, data = training)
NN = neuralnet(formula = formula, hidden = c(15,5), linear.output = T, threshold = 0.01, stepmax = 1e+9, data = training)
NN = neuralnet(formula = formula, hidden = c(10), linear.output = T, threshold = 0.01, stepmax = 1e+9, data = training)
plot(NN)
predictions = compute(NN, testing[,1:24])
predictions$net.result
?neuralnet
predictions$net.result[1]
predictions$net.result
unname(predictions$net.result)
unlist(predictions$net.result)
NN$call
NN$response
NN$result.matrix
NN$data
nrow(testing)
abs(0)
abs(-9)
sum(abs(predictions$net.result - testing$price)) / nrow(testing)
8^2
8**8
(sum((predictions$net.result - testing$price)**2) / nrow(testing)) ** 0.5
T.bar = sum(testing$price)/nrow(testing)
sum(abs(predictions$net.result - testing$price)) / sum(testing$price = T.bar)
T.bar = sum(testing$price)/nrow(testing)
sum(abs(predictions$net.result - testing$price)) / sum(testing$price - T.bar)
sum(testing$price - T.bar)
T.bar = sum(testing$price)/nrow(testing)
sum(abs(predictions$net.result - testing$price)) / sum(abs(testing$price - T.bar))
(sum((predictions$net.result - testing$price)**2) / sum((testing$price - T.bar)**2)) ** 0.5
pred.bar = mean(predictions$net.result)
test.bar = mean(testing$price)
pred.bar = mean(predictions$net.result)
pred.sd = sd(predictions$net.result)
test.bar = mean(testing$price)
test.sd = sd(testing$price)
(sum((predictions$net.result-pred.bar)*(testing$price-test.bar)) / (nrow(testing)*pred.sd*test.sd)) ** 2
